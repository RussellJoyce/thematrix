/*****************************************************
Getting Started Guild for Zybo

This demo displays the status the switches on the
LEDs and prints a message to the serial communication
when a button is pressed

Terminal Settings:
   -Baud: 115200
   -Data bits: 8
   -Parity: no
   -Stop bits: 1

1/6/14: Created by MarshallW
****************************************************/

#include <stdio.h>
#include "platform.h"
#include <xgpio.h>
#include "xparameters.h"
#include "sleep.h"

#define CLK		0b0010000
#define LATCH 	0b0100000
#define BLANK	0b1000000
#define addr(x)	x
#define RGB_CHANNEL 2
#define CTRL_CHANNEL 1

#define RED 	0b100100
#define GREEN 	0b010010
#define BLUE 	0b001001

int main()
{
   XGpio sw_button_input, led_output, pmod_output;
   int button_data = 0;
   int switch_data = 0;
   int xor_mask = 0;
   int rgb;
   int control;
   int BLANK_state;
   int address = 0;
   int clk_counter = 0;
   int init_count = 16;
   int i;

   XGpio_Initialize(&sw_button_input, XPAR_AXI_GPIO_0_DEVICE_ID);	//initialize input XGpio variable
   XGpio_Initialize(&led_output, XPAR_AXI_GPIO_1_DEVICE_ID);	//initialize output XGpio variable
   XGpio_Initialize(&pmod_output, XPAR_AXI_GPIO_2_DEVICE_ID);	//initialize output XGpio variable

   XGpio_SetDataDirection(&sw_button_input, RGB_CHANNEL, 0xF);			//set first channel tristate buffer to input
   XGpio_SetDataDirection(&sw_button_input, CTRL_CHANNEL, 0xF);			//set second channel tristate buffer to input

   // Note: pmod output 1 is control, pmod output 2 is data.
   XGpio_SetDataDirection(&led_output, 1, 0x0);		//set first channel tristate buffer to output
   XGpio_SetDataDirection(&pmod_output, 1, 0x0);		//set first channel tristate buffer to output
   XGpio_SetDataDirection(&pmod_output, 2, 0x0);		//set first channel tristate buffer to output

   init_platform();

   // Presumably things start at 0, but just to be sure...
   XGpio_DiscreteWrite(&pmod_output, RGB_CHANNEL, 0);
   XGpio_DiscreteWrite(&pmod_output, CTRL_CHANNEL, 0);

   // Write color data
   rgb = 0b111111;
   XGpio_DiscreteWrite(&pmod_output, RGB_CHANNEL, rgb);
   /*
   // Blank screen
   XGpio_DiscreteSet(&pmod_output, CTRL_CHANNEL, BLANK);

   // Write color data
   rgb = 0b010100;
   XGpio_DiscreteWrite(&pmod_output, RGB_CHANNEL, rgb);
   usleep(200000);			//delay

   // Toggle clock signal
   XGpio_DiscreteSet(&pmod_output, CTRL_CHANNEL, CLK);
   usleep(200000);			//delay
   XGpio_DiscreteClear(&pmod_output, CTRL_CHANNEL, CLK);

   // Toggle latch
   XGpio_DiscreteSet(&pmod_output, CTRL_CHANNEL, LATCH);
   usleep(200000);			//delay
   XGpio_DiscreteClear(&pmod_output, CTRL_CHANNEL, LATCH);

   // Output enable
   XGpio_DiscreteClear(&pmod_output, CTRL_CHANNEL, BLANK);
   BLANK_state = 0;
   srand(0);
   */

   XGpio_DiscreteWrite(&pmod_output, CTRL_CHANNEL, 0b000001);	//write button data to the LEDs
   XGpio_DiscreteWrite(&pmod_output, CTRL_CHANNEL, 0b000000);	//write button data to the LEDs
   while(1){
      switch_data = XGpio_DiscreteRead(&sw_button_input, 2);	//get switch data

      button_data = XGpio_DiscreteRead(&sw_button_input, 1);	//get button data

      XGpio_DiscreteWrite(&led_output, 1, button_data);	//write button data to the LEDs
//      XGpio_DiscreteWrite(&pmod_output, CTRL_CHANNEL, rand() & 0b0000111 | BLANK);	//write button data to the LEDs
      XGpio_DiscreteWrite(&pmod_output, CTRL_CHANNEL, address);	//write button data to the LEDs
      if(init_count != 0) {
    	 for(i = 0; i < 11; i++) {
    	   XGpio_DiscreteWrite(&pmod_output, RGB_CHANNEL, RED);
    	   XGpio_DiscreteWrite(&pmod_output, CTRL_CHANNEL, address | CLK);	//write button data to the LEDs
    	   XGpio_DiscreteWrite(&pmod_output, RGB_CHANNEL, GREEN);
    	   XGpio_DiscreteWrite(&pmod_output, CTRL_CHANNEL, address | CLK);	//write button data to the LEDs
    	   XGpio_DiscreteWrite(&pmod_output, RGB_CHANNEL, BLUE);
    	   XGpio_DiscreteWrite(&pmod_output, CTRL_CHANNEL, address | CLK);	//write button data to the LEDs
    	 }
    	 XGpio_DiscreteWrite(&pmod_output, CTRL_CHANNEL, address | LATCH);	//write button data to the LEDs
      }
      if(button_data) {
    	  usleep(10);
    	  XGpio_DiscreteWrite(&pmod_output, CTRL_CHANNEL, address | BLANK);	//write button data to the LEDs
      }
      clk_counter++;
      if(clk_counter == 1000) {
    	  XGpio_DiscreteWrite(&pmod_output, CTRL_CHANNEL, address | CLK);	//write button data to the LEDs
    	  usleep(10);
    	  XGpio_DiscreteWrite(&pmod_output, CTRL_CHANNEL, address | LATCH);	//write button data to the LEDs
    	  clk_counter = 0;
      }
      address = ++address % 16;
      /*
      XGpio_DiscreteWrite(&pmod_output, CTRL_CHANNEL,
    		  ((button_data & 0b0001) ? CLK : 0) |
    		  ((button_data & 0b0010) ? LATCH : 0) |
    		  ((button_data & 0b0100) ? BLANK : 0));	//write button data to the LEDs
    		  */

      usleep(1000);			//delay

   }
   cleanup_platform();
   return 0;
}
